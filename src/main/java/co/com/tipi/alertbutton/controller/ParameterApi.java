/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package co.com.tipi.alertbutton.controller;

import co.com.tipi.alertbutton.domain.AlertButton;
import co.com.tipi.alertbutton.domain.ModelApiResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-29T23:54:40.413Z")

@Api(value = "parameter", description = "the parameter API")
public interface ParameterApi {

    @ApiOperation(value = "Nuevo botón de alerta", nickname = "addButton", notes = "Agregar nuevo botón asociado a un teléfono", response = ModelApiResponse.class, authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:buttons", description = "read your experience"),
            @AuthorizationScope(scope = "write:buttons", description = "modify experience in your account")
            })
    }, tags={ "parameter", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation", response = ModelApiResponse.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/parameter/button",
        produces = { "application/xml; charset=utf-8", "application/json; charset=utf-8" }, 
        consumes = { "application/json; charset=utf-8", "application/xml; charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> addButton(@ApiParam(value = "Objecto botón que será agregado", required = true) @Valid @RequestBody AlertButton body);


    @ApiOperation(value = "Lista los botone de alerta", nickname = "buttonByPhone", notes = "Lista los botone de alerta registrados por diferentes parámetros", response = AlertButton.class, tags={ "parameter", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AlertButton.class),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "Unauthorized user") })
    @RequestMapping(value = "/parameter/button/{phone}",
        produces = { "application/json; charset=utf-8", "application/xml; charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<AlertButton> buttonByPhone(@ApiParam(value = "Teléfono", required = true) @PathVariable("phone") String phone);


    @ApiOperation(value = "Lista los botone de alerta", nickname = "listButton", notes = "Lista los botone de alerta registrados por diferentes parámetros", response = AlertButton.class, responseContainer = "List", tags={ "parameter", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AlertButton.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "Unauthorized user") })
    @RequestMapping(value = "/parameter/button",
        produces = { "application/json; charset=utf-8", "application/xml; charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AlertButton>> listButton(@ApiParam(value = "Teléfono") @Valid @RequestParam(value = "phone", required = false) String phone, @ApiParam(value = "Nombre") @Valid @RequestParam(value = "name", required = false) String name, @ApiParam(value = "Teléfono") @Valid @RequestParam(value = "address", required = false) String address, @ApiParam(value = "Nombre de contacto") @Valid @RequestParam(value = "contactName", required = false) String contactName, @ApiParam(value = "Teléfono de contacto") @Valid @RequestParam(value = "contactPhone", required = false) String contactPhone, @ApiParam(value = "Estado") @Valid @RequestParam(value = "status", required = false) String status);


    @ApiOperation(value = "Actualiza botón de alerta", nickname = "updateButton", notes = "Actualiza un botón de alerta", response = ModelApiResponse.class, authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:buttons", description = "read your experience"),
            @AuthorizationScope(scope = "write:buttons", description = "modify experience in your account")
            })
    }, tags={ "parameter", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation", response = ModelApiResponse.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Experiencia not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/parameter/button",
        produces = { "application/xml; charset=utf-8", "application/json; charset=utf-8" }, 
        consumes = { "application/json; charset=utf-8", "application/xml; charset=utf-8" },
        method = RequestMethod.PUT)
    ResponseEntity<ModelApiResponse> updateButton(@ApiParam(value = "Objecto botón que será actualizado", required = true) @Valid @RequestBody AlertButton body);

}
